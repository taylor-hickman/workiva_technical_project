name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install dbt-core dbt-duckdb

      - name: Create directories
        run: |
          mkdir -p dashboard/db
          mkdir -p dashboard/public/data
          mkdir -p account_analysis/target/data
          mkdir -p dashboard/src/lib

      - name: Create utils file
        run: |
          cat > dashboard/src/lib/utils.js << 'EOL'
          import { clsx } from 'clsx';
          import { twMerge } from 'tailwind-merge';

          export function cn(...inputs) {
            return twMerge(clsx(inputs));
          }
          EOL

      - name: Install DBT dependencies
        working-directory: ./account_analysis
        run: dbt deps --profiles-dir .

      - name: Run DBT
        working-directory: ./account_analysis
        run: |
          dbt seed --profiles-dir .
          dbt run --full-refresh --profiles-dir .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dashboard dependencies
        working-directory: ./dashboard
        run: |
          npm install -g pnpm
          pnpm install --no-frozen-lockfile
          node scripts/configure-duckdb.mjs

      - name: Export DBT artifacts
        working-directory: ./account_analysis
        run: |
          echo "Creating data directory..."
          mkdir -p "../dashboard/public/data"
          echo "Directory created. Contents:"
          ls -la "../dashboard/public/data"
          
          echo "Running DBT export operation..."
          dbt run-operation export_results_to_json --args '{target_path: "../dashboard/public/data"}' --debug
          
          echo "Export completed. Directory contents:"
          ls -la "../dashboard/public/data"
          
          echo "Verifying JSON files..."
          for f in ../dashboard/public/data/*.json; do
            if [ -f "$f" ]; then
              echo "Found file: $f"
              echo "File size: $(stat -f%z "$f") bytes"
              echo "First few lines:"
              head -n 3 "$f"
              echo "---"
            fi
          done
          
      
      - name: Verify build artifacts
        run: |
          echo "=== Source Data Files ==="
          echo "dashboard/public/data contents:"
          ls -la dashboard/public/data/
          
          echo "=== Build Output ==="
          echo "dashboard/dist contents:"
          ls -la dashboard/dist/
          
          echo "=== Asset Files ==="
          echo "dashboard/dist/assets contents:"
          ls -la dashboard/dist/assets/
          
          echo "=== WASM Files ==="
          find dashboard/dist -name "*.wasm"
          
          echo "=== Verifying public data files are copied ==="
          if [ -d "dashboard/dist/data" ]; then
            echo "Data directory exists in dist"
            ls -la dashboard/dist/data/
          else
            echo "Creating data directory in dist"
            mkdir -p dashboard/dist/data
            cp -r dashboard/public/data/* dashboard/dist/data/
            echo "Files copied. Contents:"
            ls -la dashboard/dist/data/
          fi
          
          echo "=== Verifying required files ==="
          [ -f "dashboard/dist/.nojekyll" ] || touch dashboard/dist/.nojekyll
          [ -f "dashboard/dist/vercel.json" ] || cp dashboard/public/vercel.json dashboard/dist/
          echo "Required files check complete"
          
      - name: Build dashboard
        working-directory: ./dashboard
        env:
          NODE_ENV: production
        run: |
          pnpm build

      - name: Verify build output
        run: |
          echo "Checking dist directory structure:"
          ls -R dashboard/dist/
          echo "Checking for WASM files:"
          find dashboard/dist -name "*.wasm"

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dashboard/dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4